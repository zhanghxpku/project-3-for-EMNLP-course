---

# Dataset metadata
default_dataset: &default_dataset
    type: PythonDataset
    delim: "\t"
    buffer_size: 40000
    shuffle: True
    map_tables:
        word2id:
            path: word.dict
        word2id_emb:
            path: word_emb.dict
        relation2id: 
            path: relation.single.dict
        entity2id: 
            path: entity.single.dict

    slots: 
        idx:
            index: 0
            type: value
            value_type: int32
        word: &default_slot
            index: 1
            type: sequence
            delim: " "
            map_table: word2id
            max_length: 46
            pad: 0
        word_emb:
            map_table: word2id_emb
            << : *default_slot
        relation:
            index: 2
            type: value
            map_table: relation2id
            << : *default_slot
        entity:
            index: 3
            type: value
            map_table: entity2id

pred_dataset: &pred_dataset
    type: PythonDataset
    delim: "\t"
    buffer_size: 40000
    shuffle: True
    map_tables:
        word2id:
            path: word.dict
        word2id_emb:
            path: word_emb.dict
        relation2id: 
            path: relation.dict

    slots: 
        idx:
            index: 0
            type: value
            value_type: int32
        word:
            index: 1
            << : *default_slot
        word_emb:
            map_table: word2id_emb
            << : *default_slot
#        relation:
#            index: 2
#            type: value
#            map_table: relation2id
#            << : *default_slot
        entity:
            index: 3
            type: value
            map_table: entity2id

train_dataset: &train_dataset
    path: data/EMNLP.train.single.new
    << : *default_dataset

dev_dataset: &dev_dataset
    shuffle: False
    path: data/EMNLP.dev.single.new
    << : *default_dataset

test_dataset: &test_dataset
    shuffle: False
    path: data/EMNLP.dev.single.new
    << : *default_dataset

predict_dataset: &predict_dataset
    shuffle: False
    path: data/EMNLP.test.single.new
    << : *pred_dataset

# logging:
#     file: results/semantic_parsing/logging.out
#     level: 3

# Model config
model:
    model_name: DependencyModel
    
    # Data
    max_length: 60
    max_char: 31
    relation_max_len: 12
    
    char_size: 144
    trigram_size: 5356
    vocab_size: 18382
    vocab_size_emb: 15564
    relation_size: 1229

    # Word-level encoder
    use_word_pretrain_emb: True
    word_emb_finetune: True
    word2vec_emb: 'embedding.300d'
    word2gram_emb: 'word2gram_emb.npy'
    relation2word: 'relation2word.npy'
    relation2word_emb: 'relation2word_emb.npy'
    word_emb_size: 300
    use_rnn: False
    hidden_size: 300
    word_aggregation: sum # none, end (only for rnn), attention

    # Char-level encoder
    word2char: 'word2char.npy'
    word2gram: 'word2gram.npy'
    relation2char: 'relation2char.npy'
    relation2gram: 'relation2gram.npy'
    char_emb_size: 300
    encoder: trigram # trigram or CNN
    region_radius: 1 # only for trigram
    groups: 1 # only for CNN
    filters: 300 # only for CNN
    kernel_size: 1 # only for CNN
    use_rnn_char: False
    hidden_size_char: 300 # only for rnn

    # Combination
    use_highway: False
    
    # Projection to semantic space
    aggregation: max # mean, max, attention
    layer_num: 0
    
    semantic_size: 500
    dropout_rate: 0.1
    negative_samples: 100
    gamma: 5
    
    # Training
    batch_size: 100
    optimizer: Adam
    learning_rate: 0.02
    use_clip_by_norm: True
    decay_step: 270
    decay_rate: 0.95

# Estimator
estimator:
    type: PythonEstimator
    train_dataset: *train_dataset
    eval_datasets:
        # - *train_dataset
        - *dev_dataset
        # - *test_dataset
    eval_to_file: True
    eval_op_path: results/semantic_parsing/eval.output
    # infer_dataset: *predict_dataset
    # infer_op_path: results/semantic_parsing/infer.output

    batch_size: 100
    max_epochs: 40

    word2id: word.dict
    word2id_emb: word_emb.dict
    relation2id: relation.single.dict
    entity2id: entity.single.dict
    checkpoint_dir: results/semantic_parsing/checkpoint

    model_name: semantic_parsing_model
    # save_checkpoints_steps: 2000
    eval_interval_epochs: 100
#    eval_interval_steps: 100
    max_training_steps: 40000
    log_every_n_steps: 20
    tolerance: 5
    skip_eval_save: False